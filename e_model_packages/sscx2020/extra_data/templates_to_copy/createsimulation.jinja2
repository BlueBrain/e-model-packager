/*
Copyright (c) BBP/EPFL 2021.
This work is licenced under Creative Common CC BY-NC-SA-4.0 (https://creativecommons.org/licenses/by-nc-sa/4.0/)
*/

load_file("nrngui.hoc")
load_file("import3d.hoc")
load_file("{{hoc_file}}")
{%- if add_synapses %}
load_file("{{syn_dir}}/{{syn_hoc_file}}")
{%- endif %}
//======================== constants ========================
celsius={{celsius}}
v_init={{v_init}}
dt={{dt}}

//=================== creating cell object ===========================
objref cell

proc create_cell() { localobj cellstring
    cellstring = new String()
    sprint(cellstring.s, "cell = new %s(%d, \"%s\")", "{{template_name}}", {{gid}}, "{{morph_path}}")
    execute(cellstring.s)
}
//==================== recording settings ==========================

objref time, voltage
proc create_recording() {
    voltage = new Vector()
    time = new Vector()

    access cell.soma
    time.record(&t, 0.1)
    voltage.record(&v(0.5), 0.1)

}

//==================== stimulus settings ===========================

objref holding_stimulus
{{initiate_step_stimuli}}
objref ramp_times
objref ramp_amps
objref ramp_stimulus

proc reset_stimuli () {
    holding_stimulus = new IClamp(0.5)
    holding_stimulus.dur = 0.0
    holding_stimulus.del = 0.0
    holding_stimulus.amp = 0.0
    cell.soma holding_stimulus

    ramp_times = new Vector()
    ramp_amps = new Vector()

    ramp_stimulus = new IClamp(0.5)
    ramp_stimulus.dur = 0.0
    cell.soma ramp_stimulus

    {{reset_step_stimuli}}
}


proc create_stimulus() { local stim_number
    {%- if add_synapses %}
    // Reset the synapses if there are any from previous protocols
    cell.synapses.reset_netcons()
    {%- endif %}
    reset_stimuli()

    stim_number = $1

    {{stims}}
}

//============================= simulation ================================

proc simulate() {
    cvode.active(0)

    print "Running simulation"

    run()
}

//============================= saving results ============================

proc save_recording() { localobj timevoltage, fh, fpath
    fpath = new String()
    stim_number = $1

    {{save_recordings}}

    timevoltage = new Matrix(time.size(), 2)
    timevoltage.setcol(0, time)
    timevoltage.setcol(1, voltage)

    fh = new File()
    fh.wopen(fpath.s)
    timevoltage.fprint(0, fh, "%e ")
    fh.close()

    print "Saved voltage trace to: ", fpath.s
}
