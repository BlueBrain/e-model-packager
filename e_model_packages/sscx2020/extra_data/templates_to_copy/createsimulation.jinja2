/*                                                                               
Copyright (c) BBP/EPFL 2018; All rights reserved.
Do not distribute without further notice.
*/        

load_file("nrngui.hoc")
load_file("import3d.hoc")
load_file("{{template_name}}.hoc")
{%- if add_synapses %}
load_file("{{syn_dir}}/{{syn_hoc_file}}")
{%- endif %}
//======================== constants ========================
celsius={{celsius}}
v_init={{v_init}}
tstop={{total_duration}}
dt={{dt}}

//=================== creating cell object ===========================
objref cell

proc create_cell() { localobj cellstring
    cellstring = new String()
    sprint(cellstring.s, "cell = new %s(%d, \"%s\", \"%s\")", "{{template_name}}", {{gid}}, "{{morph_dir}}", "{{morph_fname}}")
    execute(cellstring.s)
}
//==================== recording settings ==========================

objref time, voltage
proc create_recording() {
    voltage = new Vector()
    time = new Vector()

    access cell.soma
    time.record(&t, 0.1)
    voltage.record(&v(0.5), 0.1)

}

proc read_currents() {

   holding = {{holding}}
   amp1 = {{amp1}}
   amp2 = {{amp2}}
   amp3 = {{amp3}}
}

//==================== stimulus settings ===========================

objref holding_stimulus
objref step_stimulus


proc create_stimulus() {
    strdef stepcurrent
    {%- if step_stimulus %}
        step_index = $1
        holding_stimulus = new IClamp(0.5)
        holding_stimulus.dur = {{hold_stimulus_duration}}
        holding_stimulus.del = {{hold_stimulus_delay}}

        cell.soma holding_stimulus

        step_stimulus = new IClamp(0.5)
        step_stimulus.dur = {{stimulus_duration}}
        step_stimulus.del = {{stimulus_delay}}
        if (step_index == 1) { 
            step_stimulus.amp = amp1
            holding_stimulus.amp = holding
        } else if (step_index == 2) {
            step_stimulus.amp = amp2
            holding_stimulus.amp = holding
        } else if (step_index == 3) {
            step_stimulus.amp = amp3
            holding_stimulus.amp = holding
        } else {
            step_stimulus.amp = 0.0
            holding_stimulus.amp = 0.0
        }

        cell.soma step_stimulus
    {%- endif %}

    {%- if add_synapses %}
    cell.synapses.create_netcons() 
    {%- endif %}
}

//============================= simulation ================================

proc simulate() {
    cvode.active(0)

    print "Running simulation for ", {{total_duration}}, " ms"

    run()
}

//============================= saving results ============================

proc save_recording() { localobj timevoltage, fh, fpath
    fpath = new String()
    step_index = $1

    {%- if step_stimulus %}
    sprint(fpath.s, "hoc_recordings/soma_voltage_step%d.dat", step_index)
    {%- else %}
    sprint(fpath.s, "hoc_recordings/soma_voltage_%s.dat", "{{syn_stim_mode}}")
    {%- endif %}

    timevoltage = new Matrix(time.size(), 2)
    timevoltage.setcol(0, time)
    timevoltage.setcol(1, voltage)

    fh = new File()
    fh.wopen(fpath.s)
    timevoltage.fprint(0, fh, "%e ")
    fh.close()

    {%- if step_stimulus %}
    print "Saved voltage trace of step ", step_index, " to: ", fpath.s
    {%- else %}
    print "Saved voltage trace to: ", fpath.s
    {%- endif %}
}
